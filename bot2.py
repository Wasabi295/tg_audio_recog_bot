from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler, filters
from pydub import AudioSegment
import logging
import os
import aiohttp
import time
import base64
import hmac
import hashlib
import asyncio
import json
from aiohttp import FormData

# THAT'S THE VERSION FOR ACRCloud but i don't know if it's working properly, also in this version u will never get multiple results, cause i didn't implement it, it's just an example of how u can use ACRCloud API, also here is a bug
# if u try to put different MAX_DURATION u will get different results, in the version for AUDd i made a segmentation of the audio file so u can get multiple results.

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ACRCloud
ACR_ACCESS_KEY = "your access key"
ACR_SECRET_KEY = "your secret key"
ACR_HOST = "your host"
TELEGRAM_TOKEN = "your token"
FFMPEG_PATH = r"your ffmpeg path"
MAX_DURATION = 30  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

AudioSegment.converter = FFMPEG_PATH
user_data = {}


def get_acrcloud_signature():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è ACRCloud API"""
    timestamp = str(int(time.time()))
    string_to_sign = f"POST\n/v1/identify\n{ACR_ACCESS_KEY}\n{timestamp}"
    signature = base64.b64encode(
        hmac.new(ACR_SECRET_KEY.encode(), string_to_sign.encode(), hashlib.sha1).digest()
    ).decode()
    return timestamp, signature


async def process_audio(input_path: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π"""
    try:
        ext = os.path.splitext(input_path)[1].lower()
        if ext in ['.mp3', '.ogg', '.wav']:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}")
            return input_path

        output_path = f"temp_{int(time.time())}.mp3"
        audio = AudioSegment.from_file(input_path)
        audio = audio[:MAX_DURATION * 3000]
        audio.export(output_path, format="mp3")
        return output_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}")
        raise


async def recognize_audio(file_path: str) -> list:
    """–ó–∞–ø—Ä–æ—Å –∫ ACRCloud API"""
    try:
        timestamp, signature = get_acrcloud_signature()
        url = f"https://{ACR_HOST}/v1/identify"

        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
            data = FormData()
            content_type = "audio/mpeg" if file_path.endswith('.mp3') else "audio/ogg"

            with open(file_path, 'rb') as f:
                data.add_field(
                    'sample',
                    f,
                    filename=os.path.basename(file_path),
                    content_type=content_type
                )
                data.add_field('multi', '5')

                response = await session.post(
                    url,
                    headers={
                        "Authorization": f"ACR {ACR_ACCESS_KEY}:{signature}",
                        "Date": timestamp
                    },
                    data=data
                )

                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                raw_response = await response.text()
                logger.debug(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {raw_response}")

                try:
                    result = json.loads(raw_response)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
                    return []

        if result.get("status", {}).get("code") != 0:
            logger.error(f"–û—à–∏–±–∫–∞ API: {result.get('status', {}).get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return []

        return result.get("metadata", {}).get("music", [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True)
        return []
    finally:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏!\n"
        "üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, OGG, WAV\n"
        "üîç –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    )


async def handle_audio(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

        if update.message.audio:
            file = await update.message.audio.get_file()
        elif update.message.voice:
            file = await update.message.voice.get_file()
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        original_path = f"temp_{int(time.time())}_{update.update_id}"
        await file.download_to_drive(custom_path=original_path)

        processed_path = await process_audio(original_path)
        results = await recognize_audio(processed_path)

        if not results:
            await update.message.reply_text("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        user_data[update.effective_chat.id] = {
            'tracks': results,
            'current_index': 0
        }
        await show_next_result(update, context)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
    finally:
        if os.path.exists(original_path):
            try:
                os.remove(original_path)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")


def format_track_info(track: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ"""
    info = []
    title = track.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    artists = ', '.join([a.get('name', '') for a in track.get('artists', [])]) or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'

    info.append(f"üéµ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}")
    info.append(f"üé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {artists}")

    if track.get('album'):
        info.append(f"üíø <b>–ê–ª—å–±–æ–º:</b> {track['album'].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")

    if track.get('release_date'):
        info.append(f"üìÖ <b>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</b> {track['release_date']}")

    if track.get('external_metadata', {}).get('spotify', {}).get('track', {}).get('id'):
        spotify_id = track['external_metadata']['spotify']['track']['id']
        info.append(f"üîó <a href='https://open.spotify.com/track/{spotify_id}'>–°–ª—É—à–∞—Ç—å –≤ Spotify</a>")

    if track.get('external_metadata', {}).get('youtube', {}).get('vid'):
        youtube_id = track['external_metadata']['youtube']['vid']
        info.append(f"üì∫ <a href='https://youtu.be/{youtube_id}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YouTube</a>")

    return "\n".join(info)


def create_keyboard(current_index: int, total: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    buttons = []
    if current_index < total - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫", callback_data="next_track"))

    buttons.extend([
        InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
        InlineKeyboardButton("üìã –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_all"),
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
    ])

    return InlineKeyboardMarkup([
        buttons[0:1],
        buttons[1:3],
        buttons[3:]
    ])


async def show_next_result(update: Update, context: CallbackContext, is_callback: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    data = user_data.get(chat_id)

    if not data or not data.get('tracks'):
        await context.bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return

    current_index = data['current_index']
    tracks = data['tracks']

    if current_index >= len(tracks):
        await context.bot.send_message(chat_id, "üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        return

    track = tracks[current_index]
    message = format_track_info(track)
    keyboard = create_keyboard(current_index, len(tracks))

    try:
        if is_callback:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML',
                disable_web_page_preview=True
            )

        user_data[chat_id]['current_index'] = current_index + 1

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")


async def show_all_results(update: Update, context: CallbackContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    chat_id = update.effective_chat.id
    data = user_data.get(chat_id)

    if not data or not data.get('tracks'):
        await context.bot.send_message(chat_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return

    tracks = data['tracks']
    message = "<b>–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:</b>\n\n" + "\n\n".join(
        [f"{i + 1}. {format_track_info(track)}" for i, track in enumerate(tracks)]
    )

    await context.bot.send_message(
        chat_id=chat_id,
        text=message,
        parse_mode='HTML',
        disable_web_page_preview=True
    )


async def button_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "next_track":
            await show_next_result(update, context, is_callback=True)
        elif query.data == "new_search":
            await context.bot.send_message(
                query.message.chat_id,
                "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"
            )
        elif query.data == "show_all":
            await show_all_results(update, context)
        elif query.data == "close":
            await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if os.name == 'nt':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.AUDIO | filters.VOICE, handle_audio))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    try:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while True:
            await asyncio.sleep(3600)

    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        await application.stop()
        await application.shutdown()


if __name__ == "__main__":
    # –Ø–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        pass
    finally:
        if not loop.is_closed():
            loop.close()
