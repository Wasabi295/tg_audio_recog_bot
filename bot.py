from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler, filters
from pydub import AudioSegment
import logging
import os
import requests
from collections import defaultdict
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUDD_API_KEY = "your key from AUDD"
TELEGRAM_TOKEN = "your telegram token for bot"
FFMPEG_PATH = r"your path to ffmpeg"
SEGMENT_DURATION = 30  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Å–µ–∫)
MAX_SEGMENTS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤

AudioSegment.converter = FFMPEG_PATH
user_data = defaultdict(dict)


async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∏ —è –Ω–∞–π–¥—É –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ –Ω—ë–º!\n"
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
    )


def split_audio(input_path: str) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º"""
    try:
        audio = AudioSegment.from_file(input_path)
        duration = len(audio)
        segments = []

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_dir = tempfile.mkdtemp()

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
        for i in range(0, min(MAX_SEGMENTS * SEGMENT_DURATION * 1000, duration), SEGMENT_DURATION * 1000):
            start_time = i
            end_time = min(i + SEGMENT_DURATION * 1000, duration)
            segment = audio[start_time:end_time]

            segment_path = os.path.join(temp_dir, f"segment_{i // 1000}.mp3")
            segment.export(segment_path, format="mp3")
            segments.append(segment_path)

        return segments

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞—É–¥–∏–æ: {str(e)}")
        raise


async def recognize_audio_segments(segment_paths: list) -> list:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏"""
    all_results = []

    for segment_path in segment_paths:
        try:
            with open(segment_path, "rb") as f:
                response = requests.post(
                    "https://api.audd.io/",
                    data={
                        "api_token": AUDD_API_KEY,
                        "return": "apple_music,spotify",
                        "include_alternatives": "true"
                    },
                    files={"file": f}
                )
            data = response.json()

            if data.get("status") == "success":
                if data.get("result"):
                    all_results.append(data["result"])
                if data.get("alternatives"):
                    all_results.extend(data["alternatives"])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–≥–º–µ–Ω—Ç–∞: {str(e)}")

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ artist + title)
    unique_results = []
    seen = set()

    for track in all_results:
        if not track.get("title") or not track.get("artist"):
            continue

        key = f"{track['artist'].lower()}_{track['title'].lower()}"
        if key not in seen:
            seen.add(key)
            unique_results.append(track)

    return unique_results


async def handle_audio(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await update.message.audio.get_file()
        original_path = "original_audio"
        await file.download_to_drive(original_path)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        segment_paths = split_audio(original_path)
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(segment_paths)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç
        results = await recognize_audio_segments(segment_paths)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {len(results)}")

        if not results:
            await update.message.reply_text("‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        user_data[update.effective_chat.id] = {
            'tracks': results,
            'current_index': 0
        }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await show_track_result(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if 'original_path' in locals() and os.path.exists(original_path):
            try:
                os.remove(original_path)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")


async def show_track_result(update: Update, context: CallbackContext, is_callback: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    chat_id = update.effective_chat.id
    data = user_data.get(chat_id, {})

    if not data or not data.get('tracks'):
        if not is_callback:
            await update.message.reply_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    tracks = data['tracks']
    current_index = data['current_index']
    total = len(tracks)

    if current_index >= total:
        await context.bot.send_message(chat_id, "üéâ –≠—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏!")
        return

    track = tracks[current_index]
    message = format_track_info(track, current_index + 1, total)
    keyboard = create_navigation_keyboard(current_index, total)

    if is_callback:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=keyboard,
            disable_web_page_preview=True
        )


def format_track_info(track: dict, position: int, total: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ"""
    info = [f"üîç –¢—Ä–µ–∫ {position} –∏–∑ {total}:"]

    if track.get('title'):
        info.append(f"üéµ –ù–∞–∑–≤–∞–Ω–∏–µ: {track['title']}")
    if track.get('artist'):
        info.append(f"üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track['artist']}")
    if track.get('album'):
        info.append(f"üíø –ê–ª—å–±–æ–º: {track['album']}")
    if track.get('release_date'):
        info.append(f"üìÖ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {track['release_date']}")
    if track.get('score'):
        info.append(f"üî¢ –¢–æ—á–Ω–æ—Å—Ç—å: {track['score']:.0f}%")

    # –°—Å—ã–ª–∫–∏
    spotify_url = track.get('spotify', {}).get('external_urls', {}).get('spotify')
    if spotify_url:
        info.append(f"üîó Spotify: {spotify_url}")

    apple_music_url = track.get('apple_music', {}).get('url')
    if apple_music_url:
        info.append(f"üîó Apple Music: {apple_music_url}")

    return "\n".join(info)


def create_navigation_keyboard(current_index: int, total: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    buttons = []

    if current_index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_track"))

    buttons.append(InlineKeyboardButton(f"{current_index + 1}/{total}", callback_data="position"))

    if current_index < total - 1:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="next_track"))

    return InlineKeyboardMarkup([buttons]) if buttons else None


async def button_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    chat_id = update.effective_chat.id
    data = user_data.get(chat_id, {})

    if not data:
        return

    current_index = data['current_index']

    if query.data == "prev_track" and current_index > 0:
        user_data[chat_id]['current_index'] -= 1
    elif query.data == "next_track" and current_index < len(data['tracks']) - 1:
        user_data[chat_id]['current_index'] += 1

    await show_track_result(update, context, is_callback=True)


def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()


if __name__ == "__main__":
    main()